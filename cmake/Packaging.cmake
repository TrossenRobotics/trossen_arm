# The name of the package (or application). If not specified, it defaults to the project name.
set(CPACK_PACKAGE_NAME ${PROJECT_NAME})

# The name of the package vendor. (e.g., "Kitware"). The default is "Humanity".
set(CPACK_PACKAGE_VENDOR "Trossen Robotics")

# The directory in which CPack is doing its packaging. If it is not set then this will default
# (internally) to the build dir. This variable may be defined in a CPack config file or from the
# cpack command line option -B. If set, the command line option overrides the value found in the
# config file.
# set(CPACK_PACKAGE_DIRECTORY ${CMAKE_BINARY_DIR})

# Package major version. This variable will always be set, but its default value depends on whether
# or not version details were given to the project() command in the top level CMakeLists.txt file.
# If version details were given, the default value will be CMAKE_PROJECT_VERSION_MAJOR. If no
# version details were given, a default version of 0.1.1 will be assumed, leading to
# CPACK_PACKAGE_VERSION_MAJOR having a default value of 0.
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})

# Package minor version. The default value is determined based on whether or not version details
# were given to the project() command in the top level CMakeLists.txt file. If version details were
# given, the default value will be CMAKE_PROJECT_VERSION_MINOR, but if no minor version component
# was specified then CPACK_PACKAGE_VERSION_MINOR will be left unset. If no project version was
# given at all, a default version of 0.1.1 will be assumed, leading to CPACK_PACKAGE_VERSION_MINOR
# having a default value of 1.
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})

# Package patch version. The default value is determined based on whether or not version details
# were given to the project() command in the top level CMakeLists.txt file. If version details were
# given, the default value will be CMAKE_PROJECT_VERSION_PATCH, but if no patch version component
# was specified then CPACK_PACKAGE_VERSION_PATCH will be left unset. If no project version was
# given at all, a default version of 0.1.1 will be assumed, leading to CPACK_PACKAGE_VERSION_PATCH
# having a default value of 1.
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})

# A description of the project, used in places such as the introduction screen of CPack-generated
# Windows installers. If not set, the value of this variable is populated from the file named by
# CPACK_PACKAGE_DESCRIPTION_FILE.
# set(CPACK_PACKAGE_DESCRIPTION ${CMAKE_SOURCE_DIR}/README.md)

# A text file used to describe the project when CPACK_PACKAGE_DESCRIPTION is not explicitly set.
# The default value for CPACK_PACKAGE_DESCRIPTION_FILE points to a built-in template file
# Templates/CPack.GenericDescription.txt.
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")

# Short description of the project (only a few words). If the CMAKE_PROJECT_DESCRIPTION variable is
# set, it is used as the default value, otherwise the default will be a string generated by CMake
# based on CMAKE_PROJECT_NAME.
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "library used to control Trossen Robotics arms")

# Project homepage URL. The default value is taken from the CMAKE_PROJECT_HOMEPAGE_URL variable,
# which is set by the top level project() command, or else the default will be empty if no URL was
# provided to project().
set(CPACK_PACKAGE_HOMEPAGE_URL "https://docs.trossenrobotics.com/trossen_arm_docs/")

# The name of the package file to generate, not including the extension. For example,
# cmake-2.6.1-Linux-i686. The default value is:
# ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}
set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME})

# Installation directory on the target system. This may be used by some CPack generators like NSIS
# to create an installation directory e.g., "CMake 2.5" below the installation prefix. All
# installed elements will be put inside this directory.
# set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})

# A branding image that will be displayed inside the installer (used by GUI installers).
# set(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/images/Icon.ico")

# An algorithm that will be used to generate an additional file with the checksum of the package.
# The output file name will be:
# ${CPACK_PACKAGE_FILE_NAME}.${CPACK_PACKAGE_CHECKSUM}
# Supported algorithms are those listed by the string(<HASH>) command.
# set(CPACK_PACKAGE_CHECKSUM SHA256)

# CPack-time project CPack configuration file. This file is included at cpack time, once per
# generator after CPack has set CPACK_GENERATOR to the actual generator being used. It allows
# per-generator setting of CPACK_* variables at cpack time.
# set(CPACK_PROJECT_CONFIG_FILE "${CMAKE_CURRENT_LIST_DIR}/CPackConfig.cmake")

# License to be embedded in the installer. It will typically be displayed to the user by the
# produced installer (often with an explicit "Accept" button, for graphical installers) prior to
# installation. This license file is NOT added to the installed files but is used by some CPack
# generators like NSIS. If you want to use UTF-8 characters, the file needs to be encoded in UTF-8
# BOM. If you want to install a license file (may be the same as this one) along with your project,
# you must add an appropriate CMake install() command in your CMakeLists.txt.
# set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")

# ReadMe file to be embedded in the installer. It typically describes in some detail the purpose of
# the project during the installation. Not all CPack generators use this file.
# set(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")

# Welcome file to be embedded in the installer. It welcomes users to this installer. Typically used
# in the graphical installers on Windows and Mac OS X.
# set(CPACK_RESOURCE_FILE_WELCOME ${CMAKE_SOURCE_DIR}/README.md)

# Disables the component-based installation mechanism. When set, the component specification is
# ignored and all installed items are put in a single "MONOLITHIC" package. Some CPack generators
# do monolithic packaging by default and may be asked to do component packaging by setting
# CPACK_<GENNAME>_COMPONENT_INSTALL to TRUE.
# set(CPACK_MONOLITHIC_INSTALL TRUE)

# List of CPack generators to use. If not specified, CPack will create a set of options following
# the naming pattern CPACK_BINARY_<GENNAME> (e.g. CPACK_BINARY_NSIS) allowing the user to
# enable/disable individual generators. If the -G option is given on the cpack command line, it
# will override this variable and any CPACK_BINARY_<GENNAME> options.
set(CPACK_GENERATOR "DEB")

# The name of the CPack binary configuration file. This file is the CPack configuration generated
# by the CPack module for binary installers. Defaults to CPackConfig.cmake.
set(CPACK_OUTPUT_CONFIG_FILE "${CMAKE_BINARY_DIR}/CPackConfig.cmake")

# Lists each of the executables and associated text label to be used to create Start Menu
# shortcuts. For example, setting this to the list ccmake;CMake will create a shortcut named
# "CMake" that will execute the installed executable ccmake. Not all CPack generators use it (at
# least NSIS, Inno Setup and WIX do).
# set(CPACK_PACKAGE_EXECUTABLES "")

# List of files to be stripped. Starting with CMake 2.6.0, CPACK_STRIP_FILES will be a boolean
# variable which enables stripping of all files (a list of files evaluates to TRUE in CMake, so
# this change is compatible).
set(CPACK_STRIP_FILES ON)

# If set to TRUE, values of variables prefixed with CPACK_ will be escaped before being written to
# the configuration files, so that the cpack program receives them exactly as they were specified.
# If not, characters like quotes and backslashes can cause parsing errors or alter the value
# received by the cpack program. Defaults to FALSE for backwards compatibility.
set(CPACK_VERBATIM_VARIABLES TRUE)

# Number of threads to use when performing parallelized operations, such as compressing the
# installer package. Some compression methods used by CPack generators such as Debian or Archive
# may take advantage of multiple CPU cores to speed up compression. CPACK_THREADS can be set to
# specify how many threads will be used for compression.
# set(CPACK_THREADS 1)

# Each CPack generator has a default value (like /usr). This default value may be overwritten from
# the CMakeLists.txt or the cpack(1) command line by setting an alternative value. Example:
# set(CPACK_PACKAGING_INSTALL_PREFIX "/opt")
# This is not the same purpose as CMAKE_INSTALL_PREFIX which is used when installing from the build
# tree without building a package.
set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/${CPACK_PACKAGE_NAME}")

# Enable component packaging for CPackRPM. If enabled (ON) multiple packages are generated. By
# default a single package containing files of all components is generated.
# set(CPACK_DEB_PACKAGE_COMPONENT OFF)

# Set Package control field (variable is automatically transformed to lower case).
# https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source
set(CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})

# Package file name. This may be set to DEB-DEFAULT to allow CPackDeb to generate package file name
# by itself in deb format:
# <PackageName>_<VersionNumber>-<DebianRevisionNumber>_<DebianArchitecture>.deb
# Alternatively provided package file name must end with .deb suffix.
set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)

# The Debian package version
set(CPACK_DEBIAN_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION})

# This is the numbering of the DEB package itself, i.e. the version of the packaging and not the
# version of the content (see CPACK_DEBIAN_PACKAGE_VERSION). One may change the default value if
# the previous packaging was buggy and/or you want to put here a fancy Linux distro specific
# numbering.
set(CPACK_DEBIAN_PACKAGE_RELEASE 1)

# The Debian package architecture
# Output of `dpkg --print-architecture` (or i386 if dpkg is not found)
# set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE)

# Sets the Debian dependencies of this package.
# TODO(lukeschmitt-tr): Should set libc version
# set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.31), libstdc++6 (>= 10.5.0)")

# Sets inter component dependencies if listed with CPACK_COMPONENT_<compName>_DEPENDS variables.
# set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS )

# The contact for this package
set(CPACK_PACKAGE_CONTACT "trsupport@trossenrobotics.com")

# The Debian package maintainer
set(CPACK_DEBIAN_PACKAGE_MAINTAINER ${CPACK_PACKAGE_CONTACT})

# The Debian package description
set(CPACK_DEBIAN_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})

# Set Section control field e.g. admin, devel, doc, …
# https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections
set(CPACK_DEBIAN_PACKAGE_SECTION "devel")

# The compression used for creating the Debian package.
set(CPACK_DEBIAN_COMPRESSION_TYPE "gzip")

# Set Priority control field e.g. required, important, standard, optional, extra
# https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities
set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")

# The URL of the web site for this package, preferably (when applicable) the site from which the
# original source can be obtained and any additional upstream documentation or information may be
# found.
set(CPACK_DEBIAN_PACKAGE_HOMEPAGE ${CPACK_PACKAGE_HOMEPAGE_URL})

# May be set to ON in order to use dpkg-shlibdeps to generate better package dependency list.
set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS YES)

# May be set when invoking cpack in order to trace debug information during CPackDeb run.
# set(CPACK_DEBIAN_PACKAGE_DEBUG OFF)

# Sets the Pre-Depends field of the Debian package. Like Depends, except that it also forces dpkg
# to complete installation of the packages named before even starting the installation of the
# package which declares the pre-dependency.
set(CPACK_DEBIAN_PACKAGE_PREDEPENDS "")

# Sets the Enhances field of the Debian package. Similar to Suggests but works in the opposite
# direction: declares that a package can enhance the functionality of another package.
set(CPACK_DEBIAN_PACKAGE_ENHANCES "")

# Sets the Breaks field of the Debian package. When a binary package (P) declares that it breaks
# other packages (B), dpkg will not allow the package (P) which declares Breaks be unpacked unless
# the packages that will be broken (B) are deconfigured first. As long as the package (P) is
# configured, the previously deconfigured packages (B) cannot be reconfigured again.
# https://www.debian.org/doc/debian-policy/ch-relationships.html#s-breaks
set(CPACK_DEBIAN_PACKAGE_BREAKS "")

# Sets the Conflicts field of the Debian package. When one binary package declares a conflict with
# another using a Conflicts field, dpkg will not allow them to be unpacked on the system at the
# same time.
# https://www.debian.org/doc/debian-policy/ch-relationships.html#s-conflicts
set(CPACK_DEBIAN_PACKAGE_CONFLICTS "")

# Sets the Provides field of the Debian package. A virtual package is one which appears in the
# Provides control field of another package.
# https://www.debian.org/doc/debian-policy/ch-relationships.html#s-virtual
set(CPACK_DEBIAN_PACKAGE_PROVIDES "")

# Sets the Replaces field of the Debian package. Packages can declare in their control file that
# they should overwrite files in certain other packages, or completely replace other packages.
# http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps
set(CPACK_DEBIAN_PACKAGE_REPLACES "")

# Sets the Recommends field of the Debian package. Allows packages to declare a strong, but not
# absolute, dependency on other packages.
# http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps
set(CPACK_DEBIAN_PACKAGE_RECOMMENDS "")

# Sets the Suggests field of the Debian package. Allows packages to declare a suggested package
# install grouping.
# http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps
set(CPACK_DEBIAN_PACKAGE_SUGGESTS "")

# Allows to generate shlibs control file automatically. Compatibility is defined by
# CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY variable value.
set(CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS OFF)

# Compatibility policy for auto-generated shlibs control file.
# https://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-sharedlibs-shlibdeps
set(CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY "=")

# This variable allow advanced user to add custom script to the control.tar.gz. Typical usage is
# for conffiles, postinst, postrm, prerm.
set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "")

# This variable indicates if the Debian policy on control files should be strictly followed.
# https://www.debian.org/doc/debian-policy/ch-files.html#s-permissions-owners
set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION FALSE)

# Sets the Source field of the binary Debian package. When the binary package name is not the same
# as the source package name (in particular when several components/binaries are generated from one
# source) the source from which the binary has been generated should be indicated with the field
# Source.
# https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source
set(CPACK_DEBIAN_PACKAGE_SOURCE "")

set(CPACK_OUTPUT_FILE_PREFIX "${CMAKE_SOURCE_DIR}/_packages")

include(CPack)
